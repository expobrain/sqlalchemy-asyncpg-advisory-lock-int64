[tool.black]
line-length = 99
target-version = ["py310"]
exclude = '''
/(
    \.git|.venv
)/
'''

[tool.isort]
profile = "black"
float_to_top = true
skip_glob = ".venv"

[tool.poetry]
name = "sqlalchemy-asyncpg-advisory-lock-int64"
version = "0.1.0"
description = "Test of SQLAlchemy+Asyncpg+advisory locks"
repository = "https://github.com/expobrain/sqlalchemy-asyncpg-advisory-lock-int64"
authors = ["Daniele Esposti <daniele.esposti@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
SQLAlchemy = { extras = ["asyncio", "mypy"], version = "^1.4.44" }
asyncpg = "^0.27.0"
greenlet = "*"

[tool.poetry.dev-dependencies]
autoflake = "^2.0"
black = "^22.10"
isort = "^5.11.4"
mypy = "^0.982"
pdbpp = "^0.10.3"
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
flake8 = "^6.0.0"
pyupgrade = "^3.2.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
exclude = ".venv/"
plugins = ["sqlalchemy.ext.mypy.plugin"]
check_untyped_defs = true
disallow_incomplete_defs = true
warn_unused_configs = true
warn_unused_ignores = true
disallow_subclassing_any = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true

[[tool.mypy.overrides]]
module = "asyncpg"
ignore_missing_imports = true
